package kriollo

import java.io.File
import java.io.FileWriter
import kotlin.io.path.Path
import kotlin.io.path.createDirectory
import kotlin.io.path.createParentDirectories
import kotlin.io.path.notExists

fun main(args: Array<String>) {

    println(
        """
        Welcome to Kriollo
    """.trimIndent()
    )

    val buildCommand = "build"

    if (args.isEmpty()) {
        showHelp(buildCommand)
        return
    }

    if (buildCommand == args[0]) {
        val mainClass = "kriollo.KriolloKt"

        initBuild()
        initMainScript(mainClass)
        initNixFile()
        initGit()
        initMaven()
        return
    }

    showHelp(buildCommand)
}

fun showHelp(buildCommand: String) {
    println(
        """
        
            Usage : 
                $buildCommand : generate or regenerate the project
            
        """.trimIndent()
    )
    return
}

/*
 * TODO setup tests to start TDD loops => require Maven (JUnit)
 */

fun initBuild() {
    val customSteps = listOf(
        Pair("Copy jar into codegen dir", "cp target/kriollo.jar codegen/")
    )

    val customScript = customSteps.joinToString("\n") { (step, command) ->
        """
        if [[ ${'$'}? > 0 ]]
        then
            echo 
            echo "> ! Build failed"
            exit 1
        else 
            echo 
            echo "> $step"
            $command
        fi
    """
    }

    val buildScriptTemplate = """
        # /!\ warning
        # this file is generated by kriollo, do not edit it manually
        
        echo "> Building jar"
        mvn clean package -DskipTests
        
        $customScript
        
        if [[ ${'$'}? > 0 ]]
        then
            echo
            echo "! Build failed"
            exit 1
        else
            echo 
            echo "> Build successful"
            exit 0
        fi
    """.trimIndent()

    createDirectories("./build")
    initFile("./build/build.sh", buildScriptTemplate, isScript = true)
}

fun initMainScript(mainClass: String) {

    val mainScriptTemplate = """
        #!/usr/bin/env bash
        
        # /!\ Warning
        # This file is generated by Kriollo, do not edit it manually 
        
        kotlin -classpath codegen/kriollo.jar $mainClass ${'$'}*
    """.trimIndent()

    createDirectories("./codegen")
    initFile("./codegen/kriollo", mainScriptTemplate, isScript = true)
}

fun initGit() {
    val gitignoreTemplate = """
        # /!\ Warning
        # This file is generated by Kriollo, do not edit it manually 
        
        # Intellij files
        .idea/
        
        # Java artifacts
        *.jar
        
        # Maven working directories
        target/
    """.trimIndent()
    initFile(".gitignore", gitignoreTemplate)
}

fun initNixFile() {
    val nixTemplate = """
        # /!\ Warning
        # This file is generated by Kriollo, do not edit it manually
        with (import <nixpkgs> {});
        mkShell {
            buildInputs = [
                jdk21
                kotlin
                maven
            ];
            shellHook = ''
              export JAVA_HOME=${'$'}{jdk21.home}
            '';
        }
    """.trimIndent()

    initFile("default.nix", nixTemplate)
}

fun initFile(filename: String, template: String, isScript: Boolean = false) {
    println("> Generating $filename file")

    val fileToCreate = File(filename)
    if (!fileToCreate.exists()) {
        fileToCreate.createNewFile()

    }

    if (isScript) {
        val success = fileToCreate.setExecutable(true)
        if (!success) {
            println("! Could not make $filename executable")
        }
    }

    val fileWriter = FileWriter(fileToCreate)
    fileWriter.write(template)
    fileWriter.flush()
    fileWriter.close()
}


fun initMaven() {
    createPomFile()
    createDirectories(
        "./src/main/kotlin",
        "./src/test/kotlin",
    )
}

fun createPomFile() {
    val pomTemplate = """
        <?xml version="1.0" encoding="UTF-8"?>
        <project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"
                 xmlns="http://maven.apache.org/POM/4.0.0"
                 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <!-- 
                /!\ Warning  
                This file is generated by Kriollo, do not edit it manually 
            -->
            <modelVersion>4.0.0</modelVersion>
            <groupId>kriollo</groupId>
            <artifactId>kriollo</artifactId>
            <version>1.0.0-SNAPSHOT</version>
            <packaging>jar</packaging>
            
            <properties>
                <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
                <kotlin.code.style>official</kotlin.code.style>
                <kotlin.compiler.jvmTarget>1.8</kotlin.compiler.jvmTarget>
            </properties>
            
            <build>
                <finalName>kriollo</finalName>
                <sourceDirectory>src/main/kotlin</sourceDirectory>
                <testSourceDirectory>src/test/kotlin</testSourceDirectory>
                <plugins>
                    <plugin>
                        <groupId>org.jetbrains.kotlin</groupId>
                        <artifactId>kotlin-maven-plugin</artifactId>
                        <version>1.9.21</version>
                        <executions>
                            <execution>
                                <id>compile</id>
                                <phase>compile</phase>
                                <goals>
                                    <goal>compile</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>test-compile</id>
                                <phase>test-compile</phase>
                                <goals>
                                    <goal>test-compile</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
            
            <dependencies>
                <dependency>
                    <groupId>org.jetbrains.kotlin</groupId>
                    <artifactId>kotlin-stdlib</artifactId>
                    <version>1.9.21</version>
                </dependency>
            </dependencies>
        </project>
    """.trimIndent()

    initFile("pom.xml", pomTemplate)
}

fun createDirectories(vararg paths: String) {

    paths.forEach {
        println("> Generating directory $it")
    }

    paths
        .map { Path(it) }
        .filter { it.notExists() }
        .forEach {
            it.createParentDirectories()
            it.createDirectory()
        }

}
