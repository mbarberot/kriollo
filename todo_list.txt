
** 2025.1.0

(A) +release test the release in Jacta
(A) +bugfix should not have both java.enabled and kotlin.enabled
(A) +upgrade update kotlin version
(A) +upgrade lib versions
(A) +generator nix allow additionnal packages
(B) think about having a whole project.type = cli to generate a battery included project (bats,picocli,...)

** 2025.2.0

(A) +generators add bats support in the test generator
(A) improve output (logging ?)
(B) +ci add coverage report to gitlab pages + link in readme
(B) +chore bump kotlin version
(B) +chore bump jackson version
(B) +chore bump versions of everything
(B) +generators +cli generate self-update and install scripts for Jacta
(B) +generators +ci generate gitlab-ci
(B) +chore handle refactor todos in code
(B) +qol add src/main/bash/install.sh (= almost identical to self-update.sh)
(C) +qol show version found in self-update.sh and install.sh scripts
(C) +qol add a full kdl configuration file reference
(C) +feat +jackson add databind
(C) +feat +jackson +maven add jackson version in properties for easier add in depdendencies
(C) +doc add license
(C) +doc add a short description in the README

** Todos **

(C) +qol +maven order dependencies by : !test > groupId > artifactId
(C) +feat +test add test.integration.enabled = true (=> failsafe maven plugin with default configuration by tag "integration-test"
(C) +feat +test add test.integration.condition = "integration-test || api-test"
(B) +generators +justfile add justfile support
(B) +generators +dockerfile generate dockerfile
(B) +generators +readme add readme support with custom title/description/sections
(B) +stabilization +config refactor usage of path "./codegen/codegen.kdl"
(B) +stabilization +config split configuration file (ie project.kdl, dotfiles.kdl, components.kdl)
(B) +stabilization +plugin use a ServiceProvider (from JDK) to build dynamic module registration
(B) +stabilization +jte use a base template for java classes
(B) +stabilization +jte use StaticTemplates
(B) +stabilization move kriollo components into a separate module and load it through ServiceProvider and a codegen/plugin/*.jar folder => careful on release
(B) +stabilization integrate DI framework

** Ideas **

IDEA:
--
fun generate(builder: Builder) {
    builder.dir(path)
    builder.kotlinFile().withTemplate(tplPath).javaModel(namespace, imports, name).content(model)
    builder.file(path).rawContent(str)
    builder.file(path).withTemplate(tplPath).content(model)
}
--

IDEA: External basic components
--
A kdl file to register it : 

* file name 
* execution rule
* path

A template file for the generation with 

* component config
* glogal config
* maybe some services

Dir structure to be defined 
Maybe:  

codegen/
  custom-components/
    my-component/
      component.kdl
      template.kte

Note: could make use of several templates, maybe in a more elaborate version later
-- 
